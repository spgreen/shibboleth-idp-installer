# SSL configuration is based on the guides at:
# https://wiki.mozilla.org/Security/Server_Side_TLS
#
# As at 25-05-2017

Listen 80

<VirtualHost *:80>
  ServerName {{ idp_host_name }}:80

  RedirectMatch 301 (.*) https://{{ idp_host_name }}$1
</VirtualHost>

Listen 443

<VirtualHost *:443>
  ServerName {{ idp_host_name }}:443

  CustomLog logs/ssl_access_log common
  CustomLog logs/ssl_request_log ssl
  ErrorLog logs/ssl_error_log
  LogLevel warn

# By default the web server will respond with the message "Forbidden You don't
# have permission to access / on this server.". You can change this behavious 
# by uncommenting the following line of configuration and setting an appropriate
# URL to redirect the user to if they attempt to navigate to the base URL of this
# web server.

# RedirectMatch 301 ^/$ http://example.com/ 
 
# The following configuration is based on the Intermediate compatibility (default)
# configuration as descibed at Security/Server Side TLS
# See: https://wiki.mozilla.org/Security/Server_Side_TLS for details.
#
# As this configuration allows for older browsers some 'weak' cyphers will be reported
# by tools such as Qualys SSL Labs (https://www.ssllabs.com/ssltest/). The presence of
# SSLHonorCipherOrder means that the server's cipher suite ordering takes precedence
# over the client's, which means the weak cyphers are  only used as a last resort when
# other ciphers are unsupported.

  SSLEngine on
  SSLProtocol             all -SSLv2 -SSLv3
  SSLCipherSuite          ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
  SSLHonorCipherOrder     on
  SSLCompression          off

  SSLCertificateFile      {{ install_base }}/keypairs/server.crt
  SSLCertificateChainFile {{ install_base }}/keypairs/intermediate.crt
  SSLCertificateKeyFile   {{ install_base }}/keypairs/server.key

  ProxyRequests Off

  <Proxy *>
    Order deny,allow
    Allow from all
  </Proxy>

  ProxyPreserveHost On

  ProxyPass /idp http://localhost:8080/idp retry=5
  ProxyPassReverse /idp http://localhost:8080/idp

  RequestHeader set X-Forwarded-Proto "https" env=HTTPS

  # If you expect to receive one of these from an upstream load balancer,
  # remove the line for the header you'll be receiving. This forces Apache to
  # create its own `X-Forwarded-For` header from the remote address of the
  # socket, when proxying to Jetty.
  RequestHeader unset Forwarded
  RequestHeader unset X-Forwarded-Host
  RequestHeader unset X-Forwarded-Server
  RequestHeader unset X-Forwarded-For
  RequestHeader unset X-Proxied-Https

  Header add Strict-Transport-Security "max-age=15768000"

  <Location /idp/profile/SAML2/SOAP/ECP>
    AuthType Basic
    AuthName "Shibboleth Identity Provider - ECP profile"
    AuthBasicProvider ldap

    # -------------------------------------------------------------------
    # Configure your ldap details to allow BASIC authentication with ECP:
    #
    # AuthLDAPURL ldap://<LDAP_HOST>:<PORT>/<USER-BASE>?<ATTRIBUTE>
    # AuthLDAPBindDN "BIND_DN"
    # AuthLDAPBindPassword "BIND_PASSWORD"

    Require valid-user
  </Location>

</VirtualHost>

